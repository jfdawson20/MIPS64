-- VHDL Entity CPU_lib.WordAllignmentUnit.interface
--
-- Created:
--          by - dawsonj.UNKNOWN (COELABS07)
--          at - 20:56:05 04/24/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2006.1 (Build 72)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.STD_LOGIC_UNSIGNED.all;

ENTITY WordAllignmentUnit IS
   PORT( 
      DATA_MemRead        : IN     std_logic;
      DATA_MemWrite       : IN     std_logic_vector (3 DOWNTO 0);
      DATA_MemoryAddress  : IN     std_logic_vector (31 DOWNTO 0);
      DATA_MemoryDataOut  : IN     std_logic_vector (31 DOWNTO 0);
      MemWait_Cache       : IN     std_logic;
      MemoryDataIn_Cache  : IN     std_logic_vector (31 DOWNTO 0);
      DATA_MemWait        : OUT    std_logic;
      DATA_MemoryDataIn   : OUT    std_logic_vector (31 DOWNTO 0);
      MemAddress_Cache    : OUT    std_logic_vector (31 DOWNTO 0);
      MemRead_Cache       : OUT    std_logic;
      MemWrite_Cache      : OUT    std_logic_vector (3 DOWNTO 0);
      MemoryDataOut_Cache : OUT    std_logic_vector (31 DOWNTO 0)
   );

-- Declarations

END WordAllignmentUnit ;

--
-- VHDL Architecture CPU_lib.WordAllignmentUnit.struct
--
-- Created:
--          by - dawsonj.UNKNOWN (COELABS07)
--          at - 20:56:05 04/24/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2006.1 (Build 72)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.STD_LOGIC_UNSIGNED.all;


ARCHITECTURE struct OF WordAllignmentUnit IS

   -- Architecture declarations

   -- Internal signal declarations



BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 AllignIncomingData
   DATA_MemoryDataIn <= MemoryDataIn_Cache WHEN (DATA_MemoryAddress(1 DOWNTO 0) = "00") --load full word, lower half word or lowest byte
                     ELSE "00000000"&MemoryDataIn_Cache(31 downto 8) WHEN  (DATA_MemoryAddress(1 DOWNTO 0) = "01") -- load second byte 
                     ELSE "0000000000000000"&MemoryDataIn_Cache(31 downto 16) WHEN (DATA_MemoryAddress(1 DOWNTO 0) = "10") -- load third byte or upper half word
                     ELSE "000000000000000000000000"&MemoryDataIn_Cache(31 downto 24) WHEN (DATA_MemoryAddress(1 DOWNTO 0) = "11"); --load last byte                                       

   -- HDL Embedded Text Block 2 AllignOutgoingData
   MemoryDataOut_Cache <= DATA_MemoryDataOut WHEN (DATA_MemoryAddress(1 DOWNTO 0) = "00") --store full word, lower half word or lowest byte
                       ELSE  "0000000000000000"&DATA_MemoryDataOut(7 downto 0)&"00000000" WHEN (DATA_MemoryAddress(1 DOWNTO 0) = "01") --store byte in second position
                       ELSE  DATA_MemoryDataOut(15 DOWNTO 0)&"0000000000000000" WHEN (DATA_MemoryAddress(1 DOWNTO 0) = "10") -- store upper halfword or third byte
                       ELSE  Data_MemoryDataOut(7 DOWNTO 0)&"000000000000000000000000" WHEN (DATA_MemoryAddress(1 DOWNTO 0) = "11"); -- store last byte 
                    
   

   -- HDL Embedded Text Block 3 eb1
   MemWrite_Cache <= "0000" WHEN DATA_MemWrite(0) = '0'
                 ELSE "0001" WHEN ((DATA_MemWrite(0) = '1') AND (DATA_MemWrite(2 DOWNTO 1) = "00") AND (DATA_MemoryAddress(1 downto 0) ="00")) --store byte in first position
                 ELSE "0010" WHEN ((DATA_MemWrite(0) = '1') AND (DATA_MemWrite(2 DOWNTO 1) = "00") AND (DATA_MemoryAddress(1 downto 0) ="01")) --store byte in second position
                 ELSE "0100" WHEN ((DATA_MemWrite(0) = '1') AND (DATA_MemWrite(2 DOWNTO 1) = "00") AND (DATA_MemoryAddress(1 downto 0) ="10")) --store byte in third position
                 ELSE "1000" WHEN ((DATA_MemWrite(0) = '1') AND (DATA_MemWrite(2 DOWNTO 1) = "00") AND (DATA_MemoryAddress(1 downto 0) ="11")) --store byte in fourth position
                 ELSE "0011" WHEN ((DATA_MemWrite(0) = '1') AND (DATA_MemWrite(2 DOWNTO 1) = "01") AND (DATA_MemoryAddress(1 downto 0) ="00")) --store half in first position
                 ELSE "1100" WHEN ((DATA_MemWrite(0) = '1') AND (DATA_MemWrite(2 DOWNTO 1) = "01") AND (DATA_MemoryAddress(1 downto 0) ="10")) --store half in second position
                 ELSE "1111" WHEN ((DATA_MemWrite(0) = '1') AND (DATA_MemWrite(2 DOWNTO 1) = "11")); --store word
                                                       
   

   -- HDL Embedded Text Block 4 eb2
   MemAddress_Cache <= DATA_MemoryAddress;                                       


   -- ModuleWare code(v1.8) for instance 'U_0' of 'buff'
   MemRead_Cache <= DATA_MemRead;

   -- ModuleWare code(v1.8) for instance 'U_2' of 'buff'
   DATA_MemWait <= MemWait_Cache;

   -- Instance port mappings.

END struct;
