-- VHDL Entity CPU_lib.Control_Unit.interface
--
-- Created:
--          by - neiderhauserm.UNKNOWN (COELABS22)
--          at - 17:57:31 04/24/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2006.1 (Build 72)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Control_Unit IS
   PORT( 
      ID_Instruction      : IN     std_logic_vector (31 DOWNTO 0);
      reset               : IN     std_logic;
      EX_Control_Signals  : OUT    std_logic_vector (31 DOWNTO 0);
      IBUS                : OUT    std_logic;
      JUMPFLAG            : OUT    std_logic;
      JUMPTYPE            : OUT    std_logic_vector (1 DOWNTO 0);
      Mem_Control_Signals : OUT    std_logic_vector (31 DOWNTO 0);
      SYSCALL             : OUT    std_logic;
      WB_Control_Signals  : OUT    std_logic_vector (31 DOWNTO 0);
      exception_return    : OUT    std_logic;
      signed              : OUT    std_logic
   );

-- Declarations

END Control_Unit ;

--
-- VHDL Architecture CPU_lib.Control_Unit.struct
--
-- Created:
--          by - neiderhauserm.UNKNOWN (COELABS22)
--          at - 17:57:31 04/24/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2006.1 (Build 72)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY CPU_lib;

ARCHITECTURE struct OF Control_Unit IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALUOPCODE         : std_logic_vector(3 DOWNTO 0);
   SIGNAL ALUSRC            : std_logic;
   SIGNAL BRANCH_SIG        : std_logic;
   SIGNAL BranchType        : std_logic_vector(2 DOWNTO 0);
   SIGNAL E_IBUS            : std_logic;
   SIGNAL E_OVR_EN          : std_logic;
   SIGNAL ExBranchSelect    : std_logic;
   SIGNAL ExReverseB        : std_logic;
   SIGNAL ID_JUMPFLAG       : std_logic;
   SIGNAL ID_JUMPTYPE       : std_logic_vector(1 DOWNTO 0);
   SIGNAL ID_SYSCALL        : std_logic;
   SIGNAL ID_signed_fix     : std_logic;
   SIGNAL INST_20_16        : std_logic_vector(4 DOWNTO 0);
   SIGNAL INST_25_21        : std_logic_vector(4 DOWNTO 0);
   SIGNAL I_am_a_load       : std_logic;
   SIGNAL I_am_a_store      : std_logic;
   SIGNAL JumpSel           : std_logic;
   SIGNAL LoadMemOp         : std_logic;
   SIGNAL MEMTOREG          : std_logic;
   SIGNAL READ_SIG          : std_logic;
   SIGNAL REGDEST           : std_logic;
   SIGNAL REGWRITE          : std_logic;
   SIGNAL ReadSize          : std_logic_vector(1 DOWNTO 0);
   SIGNAL SHAMTSel          : std_logic;
   SIGNAL ShiftInputSwitch  : std_logic;
   SIGNAL StoreMemOp        : std_logic;
   SIGNAL WRITE_SIG         : std_logic;
   SIGNAL WriteSize         : std_logic_vector(1 DOWNTO 0);
   SIGNAL ecp_rtn           : std_logic;
   SIGNAL funct             : std_logic_vector(5 DOWNTO 0);
   SIGNAL loadSign          : std_logic;
   SIGNAL opcode            : std_logic_vector(5 DOWNTO 0);
   SIGNAL write_coprocessor : std_logic;
   SIGNAL write_from_epc    : std_logic;


   -- Component Declarations
   COMPONENT Control
   PORT (
      INST_20_16        : IN     std_logic_vector (4 DOWNTO 0);
      INST_25_21        : IN     std_logic_vector (4 DOWNTO 0);
      funct             : IN     std_logic_vector (5 DOWNTO 0);
      opcode            : IN     std_logic_vector (5 DOWNTO 0);
      reset             : IN     std_logic ;
      ALUOPCODE         : OUT    std_logic_vector (3 DOWNTO 0);
      ALUSRC            : OUT    std_logic ;
      BRANCH_SIG        : OUT    std_logic ;
      BranchType        : OUT    std_logic_vector (2 DOWNTO 0);
      E_IBUS            : OUT    std_logic ;
      E_OVR_EN          : OUT    std_logic ;
      ExBranchSelect    : OUT    std_logic ;
      ExReverseB        : OUT    std_logic ;
      ID_JUMPFLAG       : OUT    std_logic ;
      ID_JUMPTYPE       : OUT    std_logic_vector (1 DOWNTO 0);
      ID_SYSCALL        : OUT    std_logic ;
      ID_signed_fix     : OUT    std_logic ;
      I_am_a_load       : OUT    std_logic ;
      I_am_a_store      : OUT    std_logic ;
      JumpSel           : OUT    std_logic ;
      LoadMemOp         : OUT    std_logic ;
      MEMTOREG          : OUT    std_logic ;
      READ_SIG          : OUT    std_logic ;
      REGDEST           : OUT    std_logic ;
      REGWRITE          : OUT    std_logic ;
      ReadSize          : OUT    std_logic_vector (1 DOWNTO 0);
      SHAMTSel          : OUT    std_logic ;
      ShiftInputSwitch  : OUT    std_logic ;
      StoreMemOp        : OUT    std_logic ;
      WRITE_SIG         : OUT    std_logic ;
      WriteSize         : OUT    std_logic_vector (1 DOWNTO 0);
      ecp_rtn           : OUT    std_logic ;
      loadSign          : OUT    std_logic ;
      write_coprocessor : OUT    std_logic ;
      write_from_epc    : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Control USE ENTITY CPU_lib.Control;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 opcode_ripper
   opcode <= ID_Instruction(31 downto 26);                                       

   -- HDL Embedded Text Block 2 funct_ripper
   funct <= ID_Instruction(5 downto 0);
                                      

   -- HDL Embedded Text Block 3 Control_Sig_Combiner
   EX_Control_Signals(31 DOWNTO 13)   <= "0000000000000000000";
   Mem_Control_Signals(31 DOWNTO 13)  <= "0000000000000000000";
   WB_Control_Signals(31 DOWNTO 5)    <= "000000000000000000000000000"; 
   
   EX_Control_Signals(12) <= write_from_epc;
   EX_Control_Signals(11) <= write_coprocessor;
   EX_Control_Signals(10) <= E_OVR_EN;
   EX_Control_Signals(9) <= ExReverseB;
   EX_Control_Signals(8) <= ExBranchSelect;
   EX_Control_Signals(7) <= SHAMTSel;
   EX_Control_Signals(6) <= ShiftInputSwitch;
   EX_Control_Signals(5) <= ALUSRC;
   EX_Control_Signals(4) <= REGDEST;
   EX_Control_Signals(3 DownTo 0) <= ALUOPCODE;
   
   Mem_Control_Signals(12) <= StoreMemOp;
   Mem_Control_Signals(11) <= LoadMemOp;
   Mem_Control_Signals(10) <= loadSign;
   Mem_Control_Signals(9 DOWNTO 8) <= WriteSize;
   Mem_Control_Signals(7 DOWNTO 6) <= ReadSize;
   Mem_Control_Signals(5 DOWNTO 3) <= BranchType;
   Mem_Control_Signals(2) <= BRANCH_SIG;
   Mem_Control_Signals(1) <= WRITE_SIG;
   Mem_Control_Signals(0) <= READ_SIG;
   
   WB_Control_Signals(4) <= I_am_a_store;
   WB_Control_Signals(3) <= I_am_a_load;
   WB_Control_Signals(2) <= JumpSel;
   WB_Control_Signals(1) <= REGWRITE;
   WB_Control_Signals(0) <= MEMTOREG;
   
   
   IBUS <= E_IBUS;
   signed <= ID_signed_fix;
   JUMPTYPE(1 DOWNTO 0) <= ID_JUMPTYPE(1 DOWNTO 0);
   JUMPFLAG <= ID_JUMPFLAG;
   SYSCALL <= ID_SYSCALL;
   exception_return <= ecp_rtn;
   
   
   

   -- HDL Embedded Text Block 4 RT_Ripper
   INST_20_16 <= ID_Instruction(20 DOWNTO 16);

   -- HDL Embedded Text Block 5 Exception_MT_Ripper
   INST_25_21 <= ID_Instruction(25 DOWNTO 21);        


   -- Instance port mappings.
   Control_Table : Control
      PORT MAP (
         INST_20_16        => INST_20_16,
         INST_25_21        => INST_25_21,
         funct             => funct,
         opcode            => opcode,
         reset             => reset,
         ALUOPCODE         => ALUOPCODE,
         ALUSRC            => ALUSRC,
         BRANCH_SIG        => BRANCH_SIG,
         BranchType        => BranchType,
         E_IBUS            => E_IBUS,
         E_OVR_EN          => E_OVR_EN,
         ExBranchSelect    => ExBranchSelect,
         ExReverseB        => ExReverseB,
         ID_JUMPFLAG       => ID_JUMPFLAG,
         ID_JUMPTYPE       => ID_JUMPTYPE,
         ID_SYSCALL        => ID_SYSCALL,
         ID_signed_fix     => ID_signed_fix,
         I_am_a_load       => I_am_a_load,
         I_am_a_store      => I_am_a_store,
         JumpSel           => JumpSel,
         LoadMemOp         => LoadMemOp,
         MEMTOREG          => MEMTOREG,
         READ_SIG          => READ_SIG,
         REGDEST           => REGDEST,
         REGWRITE          => REGWRITE,
         ReadSize          => ReadSize,
         SHAMTSel          => SHAMTSel,
         ShiftInputSwitch  => ShiftInputSwitch,
         StoreMemOp        => StoreMemOp,
         WRITE_SIG         => WRITE_SIG,
         WriteSize         => WriteSize,
         ecp_rtn           => ecp_rtn,
         loadSign          => loadSign,
         write_coprocessor => write_coprocessor,
         write_from_epc    => write_from_epc
      );

END struct;
