-- VHDL Entity CPU_lib.MEM_blk.interface
--
-- Created:
--          by - neiderhauserm.UNKNOWN (COELABS22)
--          at - 17:57:39 04/24/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2006.1 (Build 72)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY MEM_blk IS
   PORT( 
      DATA_MemoryDataIn        : IN     std_logic_vector (31 DOWNTO 0);
      LW_SW_Flush              : IN     std_logic;
      Mem_ALU_Result           : IN     std_logic_vector (31 DOWNTO 0);
      Mem_ALU_Zero             : IN     std_logic;
      Mem_Stage_ControlSignals : IN     std_logic_vector (31 DOWNTO 0);
      Stall_ID_EX              : IN     std_logic;
      Write_Data               : IN     std_logic_vector (31 DOWNTO 0);
      DATA_ALIGN               : OUT    std_logic;
      DATA_MemRead             : OUT    std_logic;
      DATA_MemWrite            : OUT    std_logic_vector (3 DOWNTO 0);
      DATA_MemoryAddress       : OUT    std_logic_vector (31 DOWNTO 0);
      DATA_MemoryDataOut       : OUT    std_logic_vector (31 DOWNTO 0);
      Flush_From_MEM           : OUT    std_logic_vector (4 DOWNTO 0);
      Mem_ALU_Result_Bypass    : OUT    std_logic_vector (31 DOWNTO 0);
      PCSrc                    : OUT    std_logic;
      Read_Data                : OUT    std_logic_vector (31 DOWNTO 0);
      stall_from_mem           : OUT    std_logic_vector (4 DOWNTO 0)
   );

-- Declarations

END MEM_blk ;

--
-- VHDL Architecture CPU_lib.MEM_blk.struct
--
-- Created:
--          by - neiderhauserm.UNKNOWN (COELABS22)
--          at - 17:57:39 04/24/2012
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2006.1 (Build 72)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE struct OF MEM_blk IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Data            : std_logic_vector(31 DOWNTO 0);
   SIGNAL immediateRead   : std_logic_vector(31 DOWNTO 0);
   SIGNAL load_Exception  : std_logic;
   SIGNAL store_Exception : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL PCSrc_internal              : std_logic;
   SIGNAL DATA_MemoryAddress_internal : std_logic_vector (31 DOWNTO 0);



BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 MemoryReadWriteControlBlock
   DATA_MemRead <= Mem_Stage_ControlSignals(0);
   
   DATA_MemWrite(3) <= '0';
   DATA_MemWrite(2 DOWNTO 1) <= Mem_Stage_ControlSignals(9 DOWNTO 8) WHEN Stall_ID_EX = '0' ELSE "00";
   DATA_MemWrite(0) <= Mem_Stage_ControlSignals(1) WHEN Stall_ID_EX = '0' ELSE '0';                                    
   

   -- HDL Embedded Text Block 2 Address_BypassAssignment
   DATA_MemoryAddress_internal <= Mem_ALU_Result;
   Mem_ALU_Result_Bypass <= Mem_ALU_Result;                                         

   -- HDL Embedded Text Block 3 WriteDataAssignment
   DATA_MemoryDataOut <= Write_Data WHEN Mem_Stage_ControlSignals(9 downto 8) = "11"
                       ELSE ("0000000000000000"&Write_Data(15 downto 0)) WHEN Mem_Stage_ControlSignals(9 downto 8) = "01"
                       ELSE ("000000000000000000000000"&Write_Data(7 downto 0))WHEN Mem_Stage_ControlSignals(9 downto 8) ="00";

   -- HDL Embedded Text Block 4 ReadDataAssignment
   Data <= Data_MemoryDataIn WHEN Mem_Stage_ControlSignals(7 downto 6) ="11" --load word
                     ELSE ("0000000000000000"&Data_MemoryDataIn(15 downto 0)) WHEN (Mem_Stage_ControlSignals(7 downto 6) = "01" AND Mem_Stage_ControlSignals(10) = '0') --load half word unsigned 
                     ELSE ("0000000000000000"&Data_MemoryDataIn(15 downto 0)) WHEN (Mem_Stage_ControlSignals(7 downto 6) = "01" AND Data_MemoryDataIn(15) = '0' AND Mem_Stage_ControlSignals(10) = '1') --load half word signed with leading 0
                     ELSE ("1111111111111111"&Data_MemoryDataIn(15 downto 0)) WHEN (Mem_Stage_ControlSignals(7 downto 6) = "01" AND Data_MemoryDataIn(15) = '1' AND Mem_Stage_ControlSignals(10) = '1') --load half word signed with leading 1
                     ELSE ("000000000000000000000000"&Data_MemoryDataIn(7 downto 0)) WHEN (Mem_Stage_ControlSignals(7 downto 6) = "00" AND Mem_Stage_ControlSignals(10) = '0') -- load byte unsigned 
                     ELSE ("000000000000000000000000"&Data_MemoryDataIn(7 downto 0)) WHEN (Mem_Stage_ControlSignals(7 downto 6) = "00" AND Data_MemoryDataIn(7) = '0' AND Mem_Stage_ControlSignals(10) = '1') --load byte signed leading 0
                     ELSE ("111111111111111111111111"&Data_MemoryDataIn(7 downto 0)) WHEN (Mem_Stage_ControlSignals(7 downto 6) = "00" AND Data_MemoryDataIn(7) = '1' AND Mem_Stage_ControlSignals(10) = '1'); --load byte signed leading 1
   
   immediateRead(31) <= Mem_ALU_Result(15);
   immediateRead(30) <= Mem_ALU_Result(14);
   immediateRead(29) <= Mem_ALU_Result(13);
   immediateRead(28) <= Mem_ALU_Result(12);
   immediateRead(27) <= Mem_ALU_Result(11);
   immediateRead(26) <= Mem_ALU_Result(10);
   immediateRead(25) <= Mem_ALU_Result(9);
   immediateRead(24) <= Mem_ALU_Result(8);
   immediateRead(23) <= Mem_ALU_Result(7);
   immediateRead(22) <= Mem_ALU_Result(6);
   immediateRead(21) <= Mem_ALU_Result(5);
   immediateRead(20) <= Mem_ALU_Result(4);
   immediateRead(19) <= Mem_ALU_Result(3);
   immediateRead(18) <= Mem_ALU_Result(2);
   immediateRead(17) <= Mem_ALU_Result(1);
   immediateRead(16) <= Mem_ALU_Result(0);  
   
   immediateRead(15 downto 0 ) <= "0000000000000000";

   -- HDL Embedded Text Block 5 Branch_Control_Unit
   PCSrc_internal <= '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "000") AND (Mem_ALU_Zero = '1') AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "001") AND (Mem_ALU_Zero = '0') AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "010") AND (Mem_ALU_Result(0) = '1') AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "011") AND (Mem_ALU_Result(31) = '0') AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "111") AND (Mem_ALU_Result(31) = '1') AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "110") AND ((Mem_ALU_Result(31) = '0') OR (Mem_ALU_Zero = '1')) AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "100") AND (Mem_ALU_Result(0) = '1') AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '1' WHEN ((Mem_Stage_ControlSignals(5 DOWNTO 3) = "101") AND (Mem_ALU_Result(31) = '0') AND (Mem_Stage_ControlSignals(2) = '1'))
               ELSE '0';   

   -- HDL Embedded Text Block 6 readDataSelectBlock
   Read_Data <= Data WHEN (Mem_Stage_ControlSignals(7 downto 6) = "00" OR Mem_Stage_ControlSignals(7 downto 6) = "01" OR Mem_Stage_ControlSignals(7 downto 6) = "11")
                ELSE immediateRead;                                        
   

   -- HDL Embedded Text Block 7 MEM_Flush_Logic
   Flush_From_MEM(4) <= '0';           
   Flush_From_MEM(3) <= '1' When PCSrc_internal = '1' ELSE '0';           
   Flush_From_MEM(2) <= '0';           
   Flush_From_MEM(1) <= '0';           
   Flush_From_MEM(0) <= '0';           

   -- HDL Embedded Text Block 8 MEM_Stall_Logic
   Stall_From_MEM(4) <= '1' WHEN (LW_SW_FLUSH = '1' AND Mem_Stage_ControlSignals(11) = '1') ELSE '0';
   Stall_From_MEM(3) <= '1' WHEN (LW_SW_FLUSH = '1' AND Mem_Stage_ControlSignals(11) = '1') ELSE '0';
   Stall_From_MEM(2) <= '1' WHEN (LW_SW_FLUSH = '1' AND Mem_Stage_ControlSignals(11) = '1') ELSE '0';
   Stall_From_MEM(1) <= '0';
   Stall_From_MEM(0) <= '0';

   -- HDL Embedded Text Block 9 DATA_ALIGN_EXCEPTION_HANDLER_BLOCK
   load_Exception <= '1' WHEN (Mem_Stage_ControlSignals(11) = '1') AND ((Mem_Stage_ControlSignals(7 DOWNTO 6) = "11" AND DATA_MemoryAddress_internal(1 DOWNTO 0) /="00") OR 
                         (Mem_Stage_ControlSignals(7 DOWNTO 6) = "01" AND (DATA_MemoryAddress_internal(1 DOWNTO 0) ="01" OR DATA_MemoryAddress_internal(1 DOWNTO 0) ="11"))) ELSE '0';
   
   store_Exception <= '1' WHEN (Mem_Stage_ControlSignals(12) = '1') AND ((Mem_Stage_ControlSignals(9 DOWNTO 8) = "11" AND DATA_MemoryAddress_internal(1 DOWNTO 0) /="00") OR 
                         (Mem_Stage_ControlSignals(9 DOWNTO 8) = "01" AND (DATA_MemoryAddress_internal(1 DOWNTO 0) ="01" OR DATA_MemoryAddress_internal(1 DOWNTO 0) ="11"))) ELSE '0';
                                                  
   


   -- ModuleWare code(v1.8) for instance 'U_0' of 'or'
   DATA_ALIGN <= load_Exception OR store_Exception;

   -- Instance port mappings.

   -- Implicit buffered output assignments
   PCSrc              <= PCSrc_internal;
   DATA_MemoryAddress <= DATA_MemoryAddress_internal;

END struct;
